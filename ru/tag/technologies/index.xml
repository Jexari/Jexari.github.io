<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Technologies | Ян Долганов</title>
    <link>https://jexari.github.io/ru/tag/technologies/</link>
      <atom:link href="https://jexari.github.io/ru/tag/technologies/index.xml" rel="self" type="application/rss+xml" />
    <description>Technologies</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>ru-ru</language><lastBuildDate>Mon, 24 Jul 2023 14:42:51 +0300</lastBuildDate>
    <image>
      <url>https://jexari.github.io/media/icon_hu8079827bf8ba6556542529f13902f8f8_5736_512x512_fill_lanczos_center_3.png</url>
      <title>Technologies</title>
      <link>https://jexari.github.io/ru/tag/technologies/</link>
    </image>
    
    <item>
      <title>Спагетти-код и как его избежать</title>
      <link>https://jexari.github.io/ru/post/spaghetti_code/</link>
      <pubDate>Mon, 24 Jul 2023 14:42:51 +0300</pubDate>
      <guid>https://jexari.github.io/ru/post/spaghetti_code/</guid>
      <description>&lt;details class=&#34;toc-inpage d-print-none  &#34; open=&#34;&#34;&gt;
&lt;summary class=&#34;font-weight-bold&#34;&gt;Содержание&lt;/summary&gt;
&lt;nav id=&#34;TableOfContents&#34; class=&#34;nav flex-column&#34;&gt;
&lt;ul&gt;
&lt;li class=&#34;nav-item&#34;&gt;&lt;a href=&#34;#introduction&#34; class=&#34;nav-link&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; Введение&lt;/a&gt;&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;&lt;a href=&#34;#temp&#34; class=&#34;nav-link&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; Определение &#34;спагетти-код&#34;&lt;/a&gt;&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;&lt;a href=&#34;#problems&#34; class=&#34;nav-link&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; Проблемы, вызываемые спагетти-кодом&lt;/a&gt;&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;&lt;a href=&#34;#solution&#34; class=&#34;nav-link&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;4&lt;/span&gt; Как избежать спагетти-кода&lt;/a&gt;&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;&lt;a href=&#34;#conclusion&#34; class=&#34;nav-link&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;5&lt;/span&gt; Заключение&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;
&lt;/details&gt;
&lt;h2 id=&#39;introduction&#39;&gt;&lt;span class=&#34;section-num&#34;&gt;&lt;b&gt;1&lt;/span&gt;. Введение&lt;/b&gt;&lt;/h2&gt;
&lt;p align=&#34;justify&#34;&gt;Программирование — это творческий процесс, который охватывает множество аспектов, включая дизайн, реализацию и поддержку программного обеспечения. Важной составляющей этого процесса является написание чистого, структурированного и поддерживаемого кода. Однако, в зависимости от сложности проекта и уровня опыта разработчика, код может стать запутанным и сложным для понимания. Это состояние кода нередко называют &#34;спагетти-кодом&#34;.&lt;/p&gt;
&lt;p align=&#34;justify&#34;&gt;&#34;Спагетти-код&#34; — это термин, который используется в области программирования для обозначения кода, который характеризуется сложной структурой, неорганизованностью, и трудностью в поддержке и понимании.&lt;/p&gt;
&lt;p align=&#34;justify&#34;&gt;В этой статье мы погрузимся в подробное изучение проблемы &#34;спагетти-кода&#34;. Мы начнем с определения этого термина, обсудим проблемы, которые может вызвать &#34;спагетти-код&#34;, и рассмотрим способы избежания и исправления этой проблемы. Эта статья предназначена как для опытных программистов, желающих улучшить свои навыки и практики написания кода, так и для начинающих, которые хотят избежать общих ошибок в программировании.&lt;/p&gt;
&lt;h2 id=&#39;temp&#39;&gt;&lt;span class=&#34;section-num&#34;&gt;&lt;b&gt;2&lt;/span&gt;. Определение &#34;спагетти-код&#34;&lt;/b&gt;&lt;/h2&gt;
&lt;p align=&#34;justify&#34;&gt;Как уже было сказано, спагетти-код представляет собой код, который сложен для понимания, изменения и поддержки. Есть ряд конкретных характеристик, которые часто ассоциируются с ним.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p align=&#34;justify&#34;&gt;Сложная и запутанная структура: Спагетти-код часто характеризуется отсутствием четкой и последовательной структуры. Код может &#34;прыгать&#34; из одной части программы в другую, создавая запутанный поток выполнения. Такая структура усложняет понимание того, как работает код, и затрудняет его отладку и изменение.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p align=&#34;justify&#34;&gt;Тесная связанность и взаимозависимость компонентов: В спагетти-коде различные части кода часто тесно связаны и взаимозависимы. Это означает, что изменение одной части кода может повлиять на работу других частей программы. Это также затрудняет тестирование кода, так как изменения в одной части кода могут вызвать неожиданные последствия в других частях программы.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p align=&#34;justify&#34;&gt;Сложность внесения изменений: Из-за тесной связанности компонентов и отсутствия структуры, спагетти-код обычно сложно изменить. Разработчикам может потребоваться много времени, чтобы понять, как работает код, прежде чем они смогут внести какие-либо изменения.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p align=&#34;justify&#34;&gt;Отсутствие документации: Спагетти-код часто сопровождается недостатком или полным отсутствием документации, что дополнительно усложняет понимание его работы. Это также затрудняет процесс передачи кода другим разработчикам.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p align=&#34;justify&#34;&gt;Проблемы с масштабируемостью: Из-за сложности структуры и тесной связанности компонентов, спагетти-код обычно сложно масштабировать. Добавление новых функций или расширение существующих может быть сложной и трудоемкой задачей.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&#34;justify&#34;&gt;Все эти характеристики делают спагетти-код проблематичным как для разработчиков, которые работают над кодом, так и для организаций, которые поддерживают и используют разрабатываемое программное обеспечение.&lt;/p&gt;
&lt;h2 id=&#39;problems&#39;&gt;&lt;span class=&#34;section-num&#34;&gt;&lt;b&gt;3&lt;/span&gt;. Проблемы, вызываемые спагетти-кодом&lt;/b&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p align=&#34;justify&#34;&gt;Отладка и поддержка&lt;/p&gt;
&lt;p align=&#34;justify&#34;&gt;Одной из основных проблем спагетти-кода является сложность его отладки и поддержки. Из-за отсутствия четкой структуры и нелинейного потока выполнения, выявление и устранение ошибок становится значительно сложнее.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p align=&#34;justify&#34;&gt;Производительность&lt;/p&gt;
&lt;p align=&#34;justify&#34;&gt;Спагетти-код может негативно сказаться на производительности программы. Неоптимальные алгоритмы и излишняя сложность могут привести к увеличению времени выполнения программы и потребления ресурсов.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p align=&#34;justify&#34;&gt;Увеличение затрат на проект&lt;/p&gt;
&lt;p align=&#34;justify&#34;&gt;Следствием вышеупомянутых проблем является увеличение затрат на проект. Внесение изменений в спагетти-код требует больше времени, что ведет к увеличению затрат на разработку и поддержку.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#39;solution&#39;&gt;&lt;span class=&#34;section-num&#34;&gt;&lt;b&gt;4&lt;/span&gt;. Как избежать спагетти-кода&lt;/b&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p align=&#34;justify&#34;&gt;Принципы SOLID&lt;/p&gt;
&lt;p align=&#34;justify&#34;&gt;Принципы SOLID – это фундаментальные принципы проектирования объектно-ориентированного программирования, которые были сформулированы и обобщены Робертом Мартином. Эти принципы ценятся за то, что они помогают создавать более чистый, модульный и поддерживаемый код, способствуя его масштабируемости и гибкости. Следование этим принципам может помочь избежать создания спагетти-кода.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p align=&#34;justify&#34;&gt;Принцип единственной ответственности (Single Responsibility Principle, SRP): Согласно этому принципу, каждый класс или модуль в программе должен иметь только одну ответственность. Это облегчает понимание и изменение кода, поскольку изменения в одной части системы меньше вероятно затронут другие части.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p align=&#34;justify&#34;&gt;Принцип открытости/закрытости (Open-Closed Principle, OCP): Этот принцип гласит, что программные сущности (классы, модули, функции и т. д.) должны быть открыты для расширения, но закрыты для модификации. Это означает, что новые функции должны добавляться через создание нового кода, а не изменение уже существующего.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p align=&#34;justify&#34;&gt;Принцип подстановки Барбары Лисков (Liskov Substitution Principle, LSP): Согласно этому принципу, объекты в программе должны быть заменяемыми на экземпляры их подтипов без изменения корректности программы. Это подчеркивает важность соблюдения контрактов и обязательств, определенных в базовых типах.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p align=&#34;justify&#34;&gt;Принцип разделения интерфейса (Interface Segregation Principle, ISP): Этот принцип гласит, что клиенты не должны зависеть от интерфейсов, которые они не используют. Это означает, что большие, &#34;толстые&#34; интерфейсы следует разбивать на более маленькие и специфичные, чтобы клиенты имели только те зависимости, которые им действительно нужны.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p align=&#34;justify&#34;&gt;Принцип инверсии зависимостей (Dependency Inversion Principle, DIP): Согласно этому принципу, зависимости на конкретные реализации должны заменяться зависимостями на абстракции. Это способствует гибкости и универсальности кода.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&#34;justify&#34;&gt;Следование этим принципам позволяет разработчикам создавать более организованный и поддерживаемый код, снижая вероятность возникновения спагетти-кода. Это требует некоторого опыта и понимания, но в долгосрочной перспективе облегчает работу над проектом и его поддержку.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p align=&#34;justify&#34;&gt;Рефакторинг&lt;/p&gt;
&lt;p align=&#34;justify&#34;&gt;Рефакторинг - это процесс изменения внутренней структуры программы или кода с целью улучшения его читаемости, поддерживаемости, расширяемости, производительности и/или исправления ошибок, без изменения внешнего поведения программы. Регулярный рефакторинг кода также является ключевым элементом в борьбе с спагетти-кодом.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p align=&#34;justify&#34;&gt;Использование тестов&lt;/p&gt;
&lt;p align=&#34;justify&#34;&gt;Тестирование программного обеспечения позволяет проверить корректность работы кода и выявить ошибки. Применение тестов также упрощает процесс рефакторинга и модификации кода.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p align=&#34;justify&#34;&gt;Паттерны проектирования&lt;/p&gt;
&lt;p align=&#34;justify&#34;&gt;Паттерны проектирования - это повторяемые решения для распространенных проблем в проектировании программного обеспечения. Они представляют собой определенные шаблоны или архитектурные подходы, которые помогают разработчикам создавать гибкие, поддерживаемые и расширяемые системы.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#39;conclusion&#39;&gt;&lt;span class=&#34;section-num&#34;&gt;&lt;b&gt;5&lt;/span&gt;. Заключение&lt;/b&gt;&lt;/h2&gt;
&lt;p align=&#34;justify&#34;&gt;Спагетти-код — это серьезная проблема, которая может негативно сказаться на разработке и поддержке программного обеспечения. Но, применяя принципы SOLID, проводя регулярный рефакторинг, используя тесты и паттерны проектирования, можно значительно снизить вероятность появления спагетти-кода и упростить процесс разработки программного обеспечения.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Технология Li-Fi</title>
      <link>https://jexari.github.io/ru/post/li-fi/</link>
      <pubDate>Sat, 20 May 2023 14:42:51 +0300</pubDate>
      <guid>https://jexari.github.io/ru/post/li-fi/</guid>
      <description>&lt;details class=&#34;toc-inpage d-print-none  &#34; open=&#34;&#34;&gt;
&lt;summary class=&#34;font-weight-bold&#34;&gt;Содержание&lt;/summary&gt;
&lt;nav id=&#34;TableOfContents&#34; class=&#34;nav flex-column&#34;&gt;
&lt;ul&gt;
&lt;li class=&#34;nav-item&#34;&gt;&lt;a href=&#34;#introduction&#34; class=&#34;nav-link&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; Введение&lt;/a&gt;&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;&lt;a href=&#34;#history_of_li-fi&#34; class=&#34;nav-link&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; История Li-Fi&lt;/a&gt;&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;&lt;a href=&#34;#wi-fi_or_li-fi&#34; class=&#34;nav-link&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; Wi-Fi или Li-Fi&lt;/a&gt;&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;&lt;a href=&#34;#other_technologies_and_li-fi&#34; class=&#34;nav-link&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;4&lt;/span&gt; Другие беспроводные технологии и Li-Fi&lt;/a&gt;&lt;/li&gt;
&lt;li class=&#34;nav-item&#34;&gt;&lt;a href=&#34;#conclusion&#34; class=&#34;nav-link&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;5&lt;/span&gt; Заключение&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;
&lt;/details&gt;
&lt;h2 id=&#39;introduction&#39;&gt;&lt;span class=&#34;section-num&#34;&gt;&lt;b&gt;1&lt;/span&gt;. Введение&lt;/b&gt;&lt;/h2&gt;
&lt;p align=&#34;justify&#34;&gt;Li-Fi — это двунаправленная высокоскоростная беспроводная технология, которая использует световые волны для передачи данных между устройствами. Она основана на светодиодах, которые могут быстро включаться и выключаться, формируя битовые последовательности. Li-Fi относится к технологиям Visible light communication (VLC). &lt;/p&gt;
&lt;h2 id=&#39;history_of_li-fi&#39;&gt;&lt;span class=&#34;section-num&#34;&gt;&lt;b&gt;2&lt;/span&gt;. История Li-Fi&lt;/b&gt;&lt;/h2&gt;
&lt;p align=&#34;justify&#34;&gt;Пионером в использовании термина Li-Fi является Харальд Хаас. Он произнес его во время выступления на TED Global в 2011 году. Харальд Хаас также является соучредителем &lt;a href=&#34;https://www.purelifi.com/&#34; target = &#34;_blank&#34;&gt;pureLiFi&lt;/a&gt;. Сама технология VLC, о которой я упоминал выше была показана миру в 2012. В 2018 году в Германии на заводе BMW была протестирована технология Li-Fi. На данный момент Li-Fi находится в стадии развития, и не все устройства могут работать с этой технологией. Однако уже сейчас многие компании заинтересованы в продвижении Li-Fi. &lt;/p&gt;
&lt;h2 id=&#39;wi-fi_or_li-fi&#39;&gt;&lt;span class=&#34;section-num&#34;&gt;&lt;b&gt;3&lt;/span&gt;. Wi-Fi или Li-Fi&lt;/b&gt;&lt;/h2&gt;
&lt;p align=&#34;justify&#34;&gt;В сравнении с Wi-Fi, Li-Fi передает данные на более высокой скорости, так как скорость передачи ограничивается скоростью включения и выключения светодиодов. Таким образом, Li-Fi может достичь скорости до 224 Гбит/с, что в разы быстрее, чем пропускная способность стандарта Wi-Fi. Также преимуществом является более безопасное соединение. Li-Fi не проникает сквозь стены, что делает передачу данные более защищенной от перехвата.&lt;/p&gt;
&lt;p align=&#34;justify&#34;&gt;Но у данной технологии есть и минусы. Например, расстояние покрытия составляет менее 10 метров, в то время как у Wi-Fi около 32 метров. Кроме того, постоянно мигающие светодиоды могут вызвать напряжение глаз.&lt;/p&gt;
&lt;h2 id=&#39;other_technologies_and_li-fi&#39;&gt;&lt;span class=&#34;section-num&#34;&gt;&lt;b&gt;4&lt;/span&gt;. Другие беспроводные технологии и Li-Fi&lt;/b&gt;&lt;/h2&gt;
&lt;p align=&#34;justify&#34;&gt;Уже сейчас такие беспроводные технологии как 5G и Wi-Fi 6 могут составить конкуренцию для Li-Fi. Они имеют похожую скорость передачи данных и работают на больших расстояниях в широком диапазоне частот. Тем не менее, например, для медицинского оборудования предпочтительней использования Li-Fi, ведь безопасность всё равно выше у VLC соединения.&lt;/p&gt;
&lt;h2 id=&#39;conclusion&#39;&gt;&lt;span class=&#34;section-num&#34;&gt;&lt;b&gt;5&lt;/span&gt;. Заключение&lt;/b&gt;&lt;/h2&gt;
&lt;p align=&#34;justify&#34;&gt;Несмотря на все ограничения, Li-Fi имеет широкий спектр применения и может использоваться на производстве, в больницах, школах, транспорте, дома, ресторанах, отелях. Эта технология уже в скором времени может улучшить качество передачи данных и связи в целом, и несомненно будет привлекать все больше внимания в ближайшее время. &lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
